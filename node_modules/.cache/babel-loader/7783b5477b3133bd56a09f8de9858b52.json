{"ast":null,"code":"import { v4 as uuid } from 'uuid';\nimport moment from 'moment';\nimport 'babel-polyfill';\nconst postKey = 'posts';\nexport function listPosts(searchText = '') {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(_listPosts(searchText));\n    }, 500);\n  });\n} // Simulated server-side code\n\nfunction _listPosts(searchText = '') {\n  let postString = localStorage.getItem(postKey);\n  let posts = postString ? JSON.parse(postString) : [];\n\n  if (posts.length > 0 && searchText) {\n    posts = posts.filter(p => {\n      return p.text.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1;\n    });\n  }\n\n  return posts;\n}\n\n;\nexport function createPost(mood, text) {\n  return new Promise((resolve, reject) => {\n    resolve(_createPost(mood, text));\n  });\n} // Simulated server-side code\n\nfunction _createPost(mood, text) {\n  const newPost = {\n    id: uuid(),\n    mood: mood,\n    text: text,\n    ts: moment().unix(),\n    clearVotes: 0,\n    cloudsVotes: 0,\n    drizzleVotes: 0,\n    rainVotes: 0,\n    thunderVotes: 0,\n    snowVotes: 0,\n    windyVotes: 0,\n    voted: \"none\"\n  };\n  const posts = [newPost, ..._listPosts()];\n  localStorage.setItem(postKey, JSON.stringify(posts));\n  return newPost;\n}\n\nexport function createVote(id, mood) {\n  return new Promise((resolve, reject) => {\n    _createVote(id, mood);\n\n    resolve();\n  });\n} // Simulated server-side code\n\nfunction _createVote(id, mood) {\n  const posts = _listPosts().map(p => {\n    if (p.id === id) {\n      if (p['voted'] === \"none\") {\n        //if belom ada vote\n        p[mood.toLowerCase() + 'Votes']++;\n        p['voted'] = mood.toLowerCase();\n        console.log(mood.toLowerCase());\n      } else {\n        // if udah ada vote sth\n        //vote the same\n        if (p['voted'] === mood.toLowerCase()) {\n          p[mood.toLowerCase() + 'Votes']--;\n          p['voted'] = \"none\";\n        } //vote differently\n        else {\n            p[p['voted'] + 'Votes']--;\n            p[mood.toLowerCase() + 'Votes']++;\n            p['voted'] = mood.toLowerCase();\n          }\n      }\n    }\n\n    return p;\n  });\n\n  localStorage.setItem(postKey, JSON.stringify(posts));\n}","map":{"version":3,"sources":["C:/Joshua/University/Software Studio/Final Project/outpairrel/src/api/posts.js"],"names":["v4","uuid","moment","postKey","listPosts","searchText","Promise","resolve","reject","setTimeout","_listPosts","postString","localStorage","getItem","posts","JSON","parse","length","filter","p","text","toLocaleLowerCase","indexOf","toLowerCase","createPost","mood","_createPost","newPost","id","ts","unix","clearVotes","cloudsVotes","drizzleVotes","rainVotes","thunderVotes","snowVotes","windyVotes","voted","setItem","stringify","createVote","_createVote","map","console","log"],"mappings":"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","sourcesContent":["import { v4 as uuid } from 'uuid';\r\nimport moment from 'moment';\r\nimport 'babel-polyfill';\r\n\r\nconst postKey = 'posts';\r\n\r\nexport function listPosts(searchText = '') {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve(_listPosts(searchText));\r\n        }, 500);\r\n    });\r\n}\r\n\r\n// Simulated server-side code\r\nfunction _listPosts(searchText = '') {\r\n    let postString = localStorage.getItem(postKey);\r\n    let posts = postString ? JSON.parse(postString) : [];\r\n    if (posts.length > 0 && searchText) {\r\n        posts = posts.filter(p => {\r\n            return p.text.toLocaleLowerCase().indexOf(searchText.toLowerCase()) !== -1\r\n        });\r\n    }\r\n    return posts;\r\n};\r\n\r\nexport function createPost(mood, text) {\r\n    return new Promise((resolve, reject) => {\r\n        resolve(_createPost(mood, text));\r\n    });\r\n}\r\n\r\n// Simulated server-side code\r\nfunction _createPost(mood, text) {\r\n    const newPost = {\r\n        id: uuid(),\r\n        mood: mood,\r\n        text: text,\r\n        ts: moment().unix(),\r\n        clearVotes: 0,\r\n        cloudsVotes: 0,\r\n        drizzleVotes: 0,\r\n        rainVotes: 0,\r\n        thunderVotes: 0,\r\n        snowVotes: 0,\r\n        windyVotes: 0,\r\n        voted: \"none\"\r\n    };\r\n    const posts = [\r\n        newPost,\r\n        ..._listPosts()\r\n    ];\r\n    localStorage.setItem(postKey, JSON.stringify(posts));\r\n    return newPost;\r\n}\r\n\r\nexport function createVote(id, mood) {\r\n    return new Promise((resolve, reject) => {\r\n        _createVote(id, mood);\r\n        resolve();\r\n    });\r\n}\r\n\r\n// Simulated server-side code\r\nfunction _createVote(id, mood) {\r\n    const posts = _listPosts().map(p => {\r\n        if (p.id === id) {\r\n            if(p['voted'] === \"none\"){ //if belom ada vote\r\n                p[mood.toLowerCase() + 'Votes']++;\r\n                p['voted'] = mood.toLowerCase();\r\n                console.log(mood.toLowerCase());\r\n            }\r\n            else{ // if udah ada vote sth\r\n                //vote the same\r\n                if(p['voted'] === mood.toLowerCase()){\r\n                    p[mood.toLowerCase() + 'Votes']--;\r\n                    p['voted'] = \"none\";\r\n                }\r\n                //vote differently\r\n                else{\r\n                    p[p['voted'] + 'Votes']--;\r\n                    p[mood.toLowerCase() + 'Votes']++;\r\n                    p['voted'] = mood.toLowerCase();\r\n                }\r\n            } \r\n        }\r\n        return p;\r\n    });\r\n    localStorage.setItem(postKey, JSON.stringify(posts));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}